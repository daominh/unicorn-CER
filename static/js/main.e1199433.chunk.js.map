{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","coins","_this2","this","request","XMLHttpRequest","open","send","onload","res","JSON","parse","response","parseApiData","Data","coinsParsed","forEach","coin","name","RAW","USD","FROMSYMBOL","price","PRICE","toFixed","setState","subscribeStream","Object","keys","symbols","_this3","cryptoio","socketIOClient","connect","subscriptions","symbol","push","emit","subs","on","message","handleMessage","split","isUp","isDown","updateCoin","_this4","window","setTimeout","_this5","react_default","a","createElement","Container","fluid","Row","className","noGutters","map","key","index","Col","xs","md","lg","classNames","Coin","tickGreen","tickRed","String","fromCharCode","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6VAwHeA,6MAjHXC,MAAQ,CACNC,MAAO,uFAGS,IAAAC,EAAAC,KACdC,EAAU,IAAIC,eAClBD,EAAQE,KAAK,MAAO,8EACpBF,EAAQG,KAAK,MACbH,EAAQI,OAAS,WACf,IAAMC,EAAMC,KAAKC,MAAMP,EAAQQ,UAC/BV,EAAKW,aAAaJ,EAAIK,4CAIbb,GAIX,IAAIc,EAAc,GAElBd,EAAMe,QAAQ,SAAAC,GACZA,EAAO,CACLC,KAAMD,EAAKE,IAAIC,IAAIC,WACnBC,MAAOL,EAAKE,IAAIC,IAAIG,MAAMC,QAAQ,IAEpCT,EAAYE,EAAKC,MAAQD,IAI3Bd,KAAKsB,SAAS,CAACxB,MAAOc,IACtBZ,KAAKuB,gBAAgBC,OAAOC,KAAKb,4CAGnBc,GAAS,IAAAC,EAAA3B,KAInB4B,EAAWC,IAAeC,QAAQ,sCAClCC,EAAgB,GAEpBL,EAAQb,QAAQ,SAAAmB,GACdD,EAAcE,KAAK,YAAaD,EAAQ,UAG1CJ,EAASM,KAAK,SAAU,CAACC,KAAQJ,IAEjCH,EAASQ,GAAG,IAAK,SAAAC,GAEfV,EAAKW,cAAcD,2CAITA,GAKZ,GAAoB,OAHpBA,EAAUA,EAAQE,MAAM,MAGX,IAA+B,MAAfF,EAAQ,GAAa,CAEhD,IAAIvB,EAAO,CACTC,KAAMsB,EAAQ,GACdlB,MAAOkB,EAAQ,IAGE,MAAfA,EAAQ,IACVvB,EAAK0B,MAAO,EACZ1B,EAAK2B,QAAS,GAEQ,MAAfJ,EAAQ,KACfvB,EAAK0B,MAAO,EACZ1B,EAAK2B,QAAS,GAEhBzC,KAAK0C,WAAW5B,uCAITA,GAAM,IAAA6B,EAAA3C,KAEXF,EAAQE,KAAKH,MAAMC,MACvBA,EAAMgB,EAAKC,MAAQD,EACnBd,KAAKsB,SAASxB,EAAMgB,EAAKC,OAMzB6B,OAAOC,WAAW,WAChB/C,EAAMgB,EAAKC,MAAMyB,MAAO,EACxB1C,EAAMgB,EAAKC,MAAM0B,QAAS,EAC1BE,EAAKrB,SAASxB,EAAMgB,EAAKC,QACxB,sCAGI,IAAA+B,EAAA9C,KACP,OACE+C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,OAAK,GACdJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,UAAU,SAAQN,EAAAC,EAAAC,cAAA,qDACvBF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,UAAU,QAAQC,WAAS,GAC7B9B,OAAOC,KAAKzB,KAAKH,MAAMC,OAAOyD,IAAI,SAACC,EAAKC,GACvC,OACEV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAKF,IAAKC,EAAOE,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAChCd,EAAAC,EAAAC,cAAA,WAASI,UAAWS,IAAW,CAACC,MAAQ,EAAKC,UAAalB,EAAKjD,MAAMC,MAAM0D,GAAKhB,KAAMyB,QAAWnB,EAAKjD,MAAMC,MAAM0D,GAAKf,UACrHM,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,SAAIH,EAAKjD,MAAMC,MAAM0D,GAAKzC,OAChCgC,EAAAC,EAAAC,cAAA,YAAOiB,OAAOC,aAAa,IAAKrB,EAAKjD,MAAMC,MAAM0D,GAAKrC,oBAxGtDiD,aCMEC,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e1199433.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport './App.css';\nimport {Container, Row, Col} from 'reactstrap';\nimport classNames from 'classnames';\n\nclass App extends Component {\n    state = {\n      coins: {}\n    }\n\n  componentDidMount() {\n    let request = new XMLHttpRequest();\n    request.open('GET', 'https://min-api.cryptocompare.com/data/top/totalvolfull?limit=100&tsym=USD')\n    request.send(null)\n    request.onload = () => {\n      const res = JSON.parse(request.response)\n      this.parseApiData(res.Data)\n    }\n  }\n\n  parseApiData(coins) {\n    /*\n      Parse raw coins data for faster/easier use. \n    */\n    let coinsParsed = {}\n\n    coins.forEach(coin => {\n      coin = {\n        name: coin.RAW.USD.FROMSYMBOL,\n        price: coin.RAW.USD.PRICE.toFixed(2)\n      }\n      coinsParsed[coin.name] = coin\n    })\n\n    \n    this.setState({coins: coinsParsed})\n    this.subscribeStream(Object.keys(coinsParsed))\n  }\n\n  subscribeStream(symbols) {\n    /*\n      Subscribe to websocket stream using coin symbols.\n    */\n    let cryptoio = socketIOClient.connect('https://streamer.cryptocompare.com')\n    let subscriptions = []\n\n    symbols.forEach(symbol => {\n      subscriptions.push('5~CCCAGG~'+ symbol +'~USD')\n    })\n\n    cryptoio.emit('SubAdd', {'subs': subscriptions})\n\n    cryptoio.on('m', message => {\n      \n      this.handleMessage(message)\n    })\n  }\n\n  handleMessage(message) {\n\n    message = message.split('~')\n    \n    // coin value goes up(1) or down(2)\n    if ((message[4] === \"1\") || (message[4] === \"2\")) {\n\n      let coin = {\n        name: message[2],\n        price: message[5]\n      }\n\n      if (message[4] === \"1\") {\n        coin.isUp = true\n        coin.isDown = false\n      }\n      else if (message[4] === \"2\") {\n        coin.isUp = false\n        coin.isDown = true\n      }\n      this.updateCoin(coin)\n    }\n  }\n  \n  updateCoin(coin) {\n    // this.state.coins[coin.name] = coin\n    let coins = this.state.coins\n    coins[coin.name] = coin\n    this.setState(coins[coin.name])\n    \n    /*\n      Reset coin status after short interval to remove binded css classes.\n      This will allow tick animations be reapplied and play again.\n    */\n    window.setTimeout(() => {\n      coins[coin.name].isUp = false\n      coins[coin.name].isDown = false\n      this.setState(coins[coin.name])\n    }, 500)\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <Row className=\"title\"><h1>Real-time Cryptocurrency Exchange Rate</h1></Row>\n        <Row className=\"coins\" noGutters>\n          {Object.keys(this.state.coins).map((key, index) => {\n            return (\n              <Col key={index} xs=\"4\" md=\"3\" lg=\"2\">\n                <section className={classNames({\"Coin\": true,'tickGreen': this.state.coins[key].isUp, 'tickRed': this.state.coins[key].isDown})}>\n                  <span><b>{this.state.coins[key].name}</b></span>\n                  <span>{String.fromCharCode(36)}{this.state.coins[key].price}</span>\n                </section>\n              </Col>\n            )})}\n          </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}